    import java.time.Duration;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.ArrayList;
    import java.util.InputMismatchException;
    import java.util.Scanner;

    public class sistemPengelolaanParkir {
        static Scanner scan = new Scanner (System.in);
        static String[][] userData = new String[10][2];
        static int userCount = 1;
        static ArrayList <Kendaraan> kendaraanMasuk = new ArrayList<>();
        static ArrayList <Kendaraan> kendaraanKeluar = new ArrayList<>();
        static DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");

        public static void main(String[] args) {
                
                String user = "frizki";
                String pass = "21345";
                userData[0][0] = user;
                userData[0][1] = pass;
                
                kendaraanMasuk.add(new Kendaraan("D 1234 ABC", LocalDateTime.now().minusHours(1)));
                kendaraanMasuk.add(new Kendaraan("B 4321 QWE", LocalDateTime.now().minusHours(3)));
                kendaraanMasuk.add(new Kendaraan("D 5678 BUM", LocalDateTime.now().minusHours(2)));
                kendaraanMasuk.add(new Kendaraan("B 8765 CEM", LocalDateTime.now().minusHours(4)));
                
                Kendaraan k1 = new Kendaraan("D 1122 KLM", LocalDateTime.now().minusHours(2));
                k1.setWaktuKeluar(LocalDateTime.now().minusHours(1));
                kendaraanKeluar.add(k1);
                
                Kendaraan k2 = new Kendaraan("B 2211 PIQ", LocalDateTime.now().minusHours(4));
                k2.setWaktuKeluar(LocalDateTime.now().minusHours(3));
                kendaraanKeluar.add(k2);
                
                Kendaraan k3 = new Kendaraan("D 1212 KUM", LocalDateTime.now().minusHours(3));
                k3.setWaktuKeluar(LocalDateTime.now().minusHours(2));
                kendaraanKeluar.add(k3);
                
                Kendaraan k4 = new Kendaraan("B 2121 BOM", LocalDateTime.now().minusHours(5));
                k4.setWaktuKeluar(LocalDateTime.now().minusHours(4));
                kendaraanKeluar.add(k4);
                

                boolean start = true;
                while (start) {
                    System.out.println("====================================");
                    System.out.println("      SELAMAT DATANG DI SISTEM      ");
                    System.out.println("====================================");
                    System.out.println("Apakah Anda ingin memulai program?");
                    System.out.println("[1] YA | [2] TIDAK");
                    System.out.print("Pilihan: ");
                    String mulai = scan.nextLine();
        
                    if (mulai.equalsIgnoreCase("YA") || mulai.equals("1"))  {
                        loading();
                while (true) {
                    System.out.println("====================================");
                    System.out.println("    SISTEM PENGELOLAAN PARKIR      ");
                    System.out.println("====================================");
                    System.out.println("Silakan pilih opsi:");
                    System.out.println("[1] MASUK");
                    System.out.println("[2] DAFTAR");
                    System.out.print("Pilihan: ");
                    String userBar = scan.nextLine();

                    if (userBar.equalsIgnoreCase("MASUK") || userBar.equals("1")) {
                        loading();
                        if (masuk()) {
                            loading();
                            System.out.println("Berhasil Masuk! Selamat Datang.");
                            start = false;
                            break;
                        } else {
                            loading();
                            System.out.println("Gagal masuk! Silakan daftar terlebih dahulu.");
                        }
                    } else if (userBar.equalsIgnoreCase("daftar") || userBar.equals("2")) {
                        loading();
                        if (!daftar()){
                        loading();
                        System.out.println("Pendaftaran berhasil! Silakan masuk.");
                    } else {
                        loading();
                        System.out.println("Silahkan kembali.");
                    }
                    } else {
                        loading();
                        System.out.println("Input tidak valid! Silakan coba lagi.");
                    }
                }
                } else if (mulai.equalsIgnoreCase("TIDAK") || mulai.equals("2")) {
                    loading();
                    System.out.println("Program tidak dimulai. Terima kasih!");
                    System.exit(0);
                    break;
                } else {
                    System.out.println("Input tidak valid! Silakan coba lagi.");
                    }
                }

                System.out.println("\nProgram sistem tiket parkir sedang berjalan");
                loading();
                while (true) {
                try {
                    System.out.println("====================================");
                    System.out.println("          MENU UTAMA PARKIR        ");
                    System.out.println("====================================");
                    System.out.println("[1] KENDARAAN MASUK");
                    System.out.println("[2] KENDARAAN KELUAR");
                    System.out.println("[3] DAFTAR KENDARAAN KENDARAAN MASUK");
                    System.out.println("[4] DAFTAR KENDARAAN KENDARAAN KELUAR");
                    System.out.println("[5] URUTKAN KENDARAAN");
                    System.out.println("[6] CARI KENDARAAN");
                    System.out.println("[7] KELUAR DARI PROGRAM");
                    System.out.print("Pilihan menu (1-7): ");
                    int menuBar = scan.nextInt();
                    scan.nextLine();

                    loading();

                    switch (menuBar) {
                        case 1:
                            kendaraanMasuk();
                            break;
                        case 2:
                            kendaraanKeluar();
                            break;
                        case 3:
                            daftarKendaraanMasuk();
                            break;
                        case 4:
                            daftarKendaraanKeluar();
                            break;
                        case 5:
                            urutkanKendaraan();
                            break;
                        case 6:
                            cariKendaraan();
                            break;
                        case 7:
                        System.out.println("Keluar dari program. Terima kasih!");
                        return;
                        default:
                        loading();
                            System.out.println("Pilihan tidak valid! Silakan coba lagi.");
                    }
                } catch (InputMismatchException e) {
                    loading();
                    System.out.println("Input harus berupa angka! Silakan coba lagi.");
                    scan.nextLine();
                }
                }

            }
        public static boolean masuk() {
            System.out.print("Nama: ");
            String name = scan.nextLine();
            System.out.print("Kata Sandi: ");
            String password = scan.nextLine();

            for (int i = 0; i < userCount; i++) {
                if (userData[i][0].equals(name) && userData[i][1].equals(password)) {
                    return true;
                }
            }
        return false;
        }

        public static boolean daftar() {
            if (userCount > userData.length) {
                System.out.println("Registrasi Gagal, Karena Pendaftaran Sudah Penuh");
                return true;
            }

            System.out.print("Nama: ");
            String name = scan.nextLine();
            for ( int i = 0; i < userCount; i++) {  
                if (userData[i][0].equals(name)){
                    System.out.println("Nama Tersebut Sudah Ada, Silahkan Masukkan Username yang Berbeda");
                    return true;
                }
            } 
            System.out.print("Kata Sandi: ");
            String pass = scan.nextLine();
            
            userData[userCount][0] = name;
            userData[userCount][1] = pass;
            userCount++;
            return false;
        }
        
        public static class Kendaraan {
            String platNomor;
            LocalDateTime waktuMasuk;
            LocalDateTime waktuKeluar;

            public Kendaraan(String platNomor, LocalDateTime waktuMasuk) {
                this.platNomor = platNomor;
                this.waktuMasuk = waktuMasuk;
                this.waktuKeluar = null;
            }
            public void setWaktuKeluar (LocalDateTime waktuKeluar) {
                this.waktuKeluar = waktuKeluar;
            }
            public String durasiParkir() {
                Duration durasi;
        
                if (waktuKeluar == null) {
                    durasi = Duration.between(waktuMasuk, LocalDateTime.now());
                } else {
                    durasi = Duration.between(waktuMasuk, waktuKeluar);
                }
        
                long totalDetik = durasi.getSeconds();
        
                long jam = totalDetik / 3600;
                long sisaDetik = totalDetik % 3600;
                long menit = sisaDetik / 60;
                long detik = sisaDetik % 60;
        
                return String.format(jam + " jam " + menit + " menit " + detik + " detik ");
            }

        public int hargaParkir() {

            Duration durasi = Duration.between
            (waktuMasuk, (waktuKeluar != null) ? waktuKeluar : LocalDateTime.now());
            long totalDetik = durasi.getSeconds();
            
            int hargaPerJam = 6000;
            int hargaPerMenit = 100;
            int hargaPerDetik = 16;

    
            long jam = totalDetik / 3600;
            long sisaDetik = totalDetik % 3600;
            long menit = sisaDetik / 60;
            long detik = sisaDetik % 60;

            int totalHarga = (int) (int) ((jam * hargaPerJam) + (menit * hargaPerMenit) + (detik * hargaPerDetik));
            
            return totalHarga;
            }
            
        }
            public static void kendaraanMasuk() {
                System.out.print("Masukkan plat nomor kendaraan: ");
                String platNomor = scan.nextLine();
                LocalDateTime waktuMasuk = LocalDateTime.now();
                kendaraanMasuk.add(new Kendaraan(platNomor, waktuMasuk));
                String waktuMasukFormat = waktuMasuk.format(format);
                System.out.println("Kendaraan " + platNomor + " telah masuk pada " + waktuMasukFormat);
        }
        public static void kendaraanKeluar() {
            System.out.print("Masukkan plat nomor kendaraan: ");
            String platNomor = scan.nextLine();
            boolean ditemukan = false;

            for (Kendaraan K : kendaraanMasuk) {
                if (K.platNomor.equals(platNomor)) {
                    LocalDateTime waktuKeluar = LocalDateTime.now();
                    K.setWaktuKeluar(waktuKeluar);
                    String waktuKeluarFormat = waktuKeluar.format(format);
                    int hargaParkir = K.hargaParkir();
                    System.out.println("Kendaraan " + platNomor + " telah keluar pada " + waktuKeluarFormat);
                    System.out.println("Durasi waktu parkir: " + K.durasiParkir());
                    System.out.println("Harga parkir: " + hargaParkir);
                    kendaraanMasuk.remove(K);
                    kendaraanKeluar.add(K);
                    break;
                }
            } if (!ditemukan) {
                loading();
                System.out.println("Kendaraan dengan plat nomor " + platNomor + " tidak ditemukan.");
            }
        }
public static void daftarKendaraanMasuk() {
    if (kendaraanMasuk == null || kendaraanMasuk.isEmpty()) {
        loading();
        System.out.println("Tidak ada kendaraan yang sedang parkir.");
    } else {
        System.out.println("=====================================");
        System.out.println("      Daftar Kendaraan yang Parkir   ");
        System.out.println("=====================================");
        for (Kendaraan K : kendaraanMasuk) {
            System.out.println("Plat Nomor: " + K.platNomor + " | Waktu Masuk: " + K.waktuMasuk.format(format));
        }
        System.out.println("=====================================");
    }
}

public static void daftarKendaraanKeluar() {
    if (kendaraanKeluar == null || kendaraanKeluar.isEmpty()) {
        loading();
        System.out.println("Tidak ada kendaraan yang keluar.");
    } else {
        System.out.println("=====================================");
        System.out.println("         Daftar Kendaraan Keluar      ");
        System.out.println("=====================================");
        for (Kendaraan K : kendaraanKeluar) {
            if (K.waktuKeluar == null) {
                K.setWaktuKeluar(LocalDateTime.now());
            }
            String waktuKeluarFormat = K.waktuKeluar.format(format);
            System.out.println("Plat Nomor: " + K.platNomor + " | Waktu Keluar: " + waktuKeluarFormat);
        }
        System.out.println("=====================================");
    }
}

        
        public static void urutkanKendaraan() {
            System.out.println("Daftar kendaraan yang ingin diurutkan:");
            System.out.println("[1] Masuk");
            System.out.println("[2] Keluar");
            System.out.print("Pilihan: ");
            String urutBar = scan.nextLine();
        
            if (urutBar.equals("1")) {
                loading();
                System.out.println("Daftar kendaraan sebelum diurutkan:");
                daftarKendaraanMasuk();
        
                int n = kendaraanMasuk.size();
                for (int i = 0; i < n - 1; i++) {
                    for (int j = 0; j < n - 1 - i; j++) {
                        if (kendaraanMasuk.get(j).waktuMasuk.isAfter(kendaraanMasuk.get(j + 1).waktuMasuk)) {
                            Kendaraan temp = kendaraanMasuk.get(j);
                            kendaraanMasuk.set(j, kendaraanMasuk.get(j + 1));
                            kendaraanMasuk.set(j + 1, temp);
                        }
                    }
                }
        
                System.out.println("Daftar kendaraan setelah diurutkan berdasarkan waktu masuk:");
                daftarKendaraanMasuk();
                loading();
            } else if (urutBar.equals("2")) {
                loading();
                System.out.println("Daftar kendaraan sebelum diurutkan:");
                daftarKendaraanKeluar();
        
                int n = kendaraanKeluar.size();
                for (int i = 0; i < n - 1; i++) {
                    for (int j = 0; j < n - 1 - i; j++) {
                        if (kendaraanKeluar.get(j).waktuKeluar != null && kendaraanKeluar.get(j + 1).waktuKeluar != null &&
                            kendaraanKeluar.get(j).waktuKeluar.isAfter(kendaraanKeluar.get(j + 1).waktuKeluar)) {
                            Kendaraan temp = kendaraanKeluar.get(j);
                            kendaraanKeluar.set(j, kendaraanKeluar.get(j + 1));
                            kendaraanKeluar.set(j + 1, temp);
                        }
                    }
                }
        
                System.out.println("Daftar kendaraan setelah diurutkan berdasarkan waktu keluar:");
                daftarKendaraanKeluar();
                loading();
            } else {
                loading();
                System.out.println("Pilihan tidak valid! Silakan coba lagi.");
            }
        }
        
        
        public static void cariKendaraan() {
            System.out.println("Daftar kendaraan yang ingin dicari:");
            System.out.println("[1] Masuk");
            System.out.println("[2] Keluar");
            System.out.print("Pilihan: ");
            String cariBar = scan.nextLine();
        
            System.out.print("Masukkan plat nomor yang ingin dicari: ");
            String platNomor = scan.nextLine();
            boolean ditemukan = false;
        
            if (cariBar.equalsIgnoreCase("Masuk") || cariBar.equals("1")) {
                for (Kendaraan k : kendaraanMasuk) {
                    if (k.platNomor.equalsIgnoreCase(platNomor)) {
                        System.out.println("Kendaraan telah ditemukan.");
                        System.out.println("Plat Nomor: " + k.platNomor + " | Waktu Masuk: " + k.waktuMasuk.format(format));
                        ditemukan = true;
                        break;
                    }
                }
                if (!ditemukan) {
                    System.out.println("Kendaraan dengan plat nomor " + platNomor + " tidak ditemukan dalam daftar kendaraan masuk.");
                }
            } else if (cariBar.equalsIgnoreCase("Keluar") || cariBar.equals("2")) {
                for (Kendaraan k : kendaraanKeluar) {
                    if (k.platNomor.equalsIgnoreCase(platNomor)) {
                        System.out.println("Kendaraan telah ditemukan.");
                        System.out.println("Plat Nomor: " + k.platNomor + " | Waktu Keluar: " + k.waktuKeluar.format(format));
                        ditemukan = true;
                        break;
                    }
                }
                if (!ditemukan) {
                    System.out.println("Kendaraan dengan plat nomor " + platNomor + " tidak ditemukan dalam daftar kendaraan keluar.");
                }
            } else {
                System.out.println("Input tidak valid! Silakan pilih 1 (Masuk) atau 2 (Keluar).");
            }
        }
        
        public static void loading() {
            try {
                for (int i = 0; i < 5; i++) {
                    Thread.sleep(400);
                    System.out.print(".");
                }
                System.out.println("");
            } catch (InterruptedException e) {
                System.out.println("Error dalam proses loading!");
            }
        }
    }
